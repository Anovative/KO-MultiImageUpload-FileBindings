!function(e){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?e(require("knockout"),require("jquery")):"function"==typeof define&&define.amd?define(["knockout","jquery"],e):e(ko,jQuery)}(function(e,t){var a={customFileInputSystemOptions:{wrapperClass:"custom-file-input-wrapper",fileNameClass:"custom-file-input-file-name",buttonGroupClass:"custom-file-input-button-group",buttonClass:"custom-file-input-button",clearButtonClass:"custom-file-input-clear-button",buttonTextClass:"custom-file-input-button-text"},defaultOptions:{wrapperClass:"input-group",fileNameClass:"disabled form-control",noFileText:"No file chosen",buttonGroupClass:"input-group-btn",buttonClass:"btn btn-primary",clearButtonClass:"btn btn-default",buttonText:"Choose File",changeButtonText:"Change",clearButtonText:"Clear",fileName:!0,clearButton:!0,onClear:function(e,t){"function"==typeof e.clear&&(e.clear(),n=[])}}},n=[],s=window.URL||window.webkitURL;return e.bindingHandlers.fileInput={init:function(a,n){a.onchange=function(){var l=e.utils.unwrapObservable(n())||{};l.dataUrl&&(l.dataURL=l.dataUrl),l.objectUrl&&(l.objectURL=l.objectUrl),l.file=l.file||e.observable();var r=this.files[0];r&&l.file(r),l.clear||(l.clear=function(){t.each(["file","objectURL","base64String","binaryString","text","dataURL","arrayBuffer"],function(t,a){l[a]&&e.isObservable(l[a])&&("objectURL"==a&&s.revokeObjectURL(l.objectURL()),l[a](null))}),a.value=""}),e.isObservable(n())&&e.utils.unwrapObservable(n()).fileData&&(console.log("WHOOH!!! This logic actually proved useful... (The chance of seeing this log is like winning the lottery... go ahead; buy a ticket NOW! Its your lucky day!)"),n()(l))},a.onchange()},update:function(t,a,n){var l=e.utils.unwrapObservable(a()),r=e.isObservable(l.file)&&l.file();if(r){var i=t.files,o=Object.keys(i).map(function(e){return i[e]});o&&o.length>0&&(console.log('ko.bindingHandlers.fileInput.update( ... ) => Added a new image from "ko.isObservable(fileData.file) && fileData.file()": Single image only -- "element.files": All Images'),o.forEach(function(e){console.log("File Chooser => NAME: "+e.name+"  --  SIZE: "+e.size+"  --  TYPE: "+e.type)}))}else console.log("ko.bindingHandlers.fileInput.update( ... ) => `!file` so we must be clearing the image(s) or the first load!");if(l.objectURL&&e.isObservable(l.objectURL)){var u=r&&s.createObjectURL(r);if(u){var b=l.objectURL();b&&s.revokeObjectURL(b),l.objectURL(u)}}l.base64String&&e.isObservable(l.base64String)&&(l.dataURL&&e.isObservable(l.dataURL)||(l.dataURL=e.observable())),["binaryString","text","dataURL","arrayBuffer"].forEach(function(t){var a="readAs"+(t.substr(0,1).toUpperCase()+t.substr(1));if(!("dataURL"==t||l[t]&&e.isObservable(l[t])))return!0;if(!r)return!0;var n=new FileReader;n.onload=function(n){if(l[t]&&l[t](n.target.result),"readAsDataURL"==a&&l.base64String&&e.isObservable(l.base64String)){var s=n.target.result.split(",");2===s.length&&l.base64String(s[1])}},n[a](r)})}},e.bindingHandlers.fileDrag={update:function(a,n,s){var l=e.utils.unwrapObservable(n())||{};t(a).data("fileDragInjected")||(a.classList.add("filedrag"),a.ondragover=a.ondragleave=a.ondrop=function(t){if(t.stopPropagation(),t.preventDefault(),"dragover"==t.type?a.classList.add("hover"):a.classList.remove("hover"),"drop"==t.type&&t.dataTransfer){var s=t.dataTransfer.files,r=s[0],i=Object.keys(s).map(function(e){return s[e]});i&&i.length>0&&i.forEach(function(e){console.log("Drag n Drop => NAME: "+e.name+"  --  SIZE: "+e.size+"  --  TYPE: "+e.type)}),r&&(l.file(r),e.isObservable(n())&&n()(l))}},t(a).data("fileDragInjected",!0))}},e.bindingHandlers.customFileInput={init:function(n,s,l){if(e.utils.unwrapObservable(s())!==!1){var r=a.customFileInputSystemOptions,i=a.defaultOptions,o=t(n),u=t("<span>").addClass(r.wrapperClass).addClass(i.wrapperClass),b=t("<span>").addClass(r.buttonGroupClass).addClass(i.buttonGroupClass);b.append(t("<span>").addClass(r.buttonClass)),o.wrap(u).wrap(b);var b=o.parent("."+r.buttonClass).parent();b.before(t("<input>").attr("type","text").attr("disabled","disabled").addClass(r.fileNameClass)),o.before(t("<span>").addClass(r.buttonTextClass))}},update:function(n,s,l){var r=e.utils.unwrapObservable(s());if(r!==!1){r=r||{},r&&"object"!=typeof r&&(r={});var i=a.customFileInputSystemOptions,o=a.defaultOptions;r=t.extend({},o,r);var u=l();if(u.fileInput){var b=e.utils.unwrapObservable(u.fileInput)||{},f=e.utils.unwrapObservable(b.file),p=t(n).parent(),d=p.parent(),c=d.parent();p.addClass(e.utils.unwrapObservable(r.buttonClass)),p.find("."+i.buttonTextClass).html(e.utils.unwrapObservable(f?r.changeButtonText:r.buttonText));var v=c.find("."+i.fileNameClass);v.addClass(e.utils.unwrapObservable(r.fileNameClass)),f&&f.name?v.val(f.name):v.val(e.utils.unwrapObservable(r.noFileText));var g=d.find("."+i.clearButtonClass);g.length||(g=t("<span>").addClass(i.clearButtonClass),g.on("click",function(e){r.onClear(b,r)}),d.append(g)),g.html(e.utils.unwrapObservable(r.clearButtonText)),g.addClass(e.utils.unwrapObservable(r.clearButtonClass)),f&&r.clearButton&&f.name||g.remove()}}}},e.fileBindings=a,a});
//# sourceMappingURL=knockout-file-bindings.min.js.map