!function(){ko.bindingHandlers.fileInput.update=function(e,a,r){var t=ko.utils.unwrapObservable(a()),i=ko.isObservable(t.file)&&t.file();if(i){var n=e.files,o=Object.keys(n).map(function(e){return n[e]});o&&o.length>0&&(console.log('ko.bindingHandlers.fileInput.update( ... ) => Added a new image from "ko.isObservable(fileData.file) && fileData.file()": Single image only -- "element.files": All Images'),o.forEach(function(e){console.log("File Chooser => NAME: "+e.name+"  --  SIZE: "+e.size+"  --  TYPE: "+e.type)}))}else console.log("ko.bindingHandlers.fileInput.update( ... ) => `!file` so we must be clearing the image(s) or the first load!");if(t.objectURL&&ko.isObservable(t.objectURL)){var s=i&&windowURL.createObjectURL(i);if(s){var l=t.objectURL();l&&windowURL.revokeObjectURL(l),t.objectURL(s)}}t.base64String&&ko.isObservable(t.base64String)&&(t.dataURL&&ko.isObservable(t.dataURL)||(t.dataURL=ko.observable()));var f=["binaryString","text","dataURL","arrayBuffer"];f.forEach(function(e){var a="readAs"+(e.substr(0,1).toUpperCase()+e.substr(1));if(!("dataURL"==e||t[e]&&ko.isObservable(t[e])))return!0;if(!i)return!0;var r=new FileReader;r.onload=function(r){if(t[e]&&t[e](r.target.result),"readAsDataURL"==a&&t.base64String&&ko.isObservable(t.base64String)){var i=r.target.result.split(",");2===i.length&&t.base64String(i[1])}},r[a](i)})},ko.bindingHandlers.fileDrag.update=function(e,a,r){var t=ko.utils.unwrapObservable(a())||{};$(e).data("fileDragInjected")||(e.classList.add("filedrag"),e.ondragover=e.ondragleave=e.ondrop=function(r){if(r.stopPropagation(),r.preventDefault(),"dragover"==r.type?e.classList.add("hover"):e.classList.remove("hover"),"drop"==r.type&&r.dataTransfer){var i=r.dataTransfer.files,n=i[0],o=Object.keys(i).map(function(e){return i[e]});o&&o.length>0&&o.forEach(function(e){console.log("Drag n Drop => NAME: "+e.name+"  --  SIZE: "+e.size+"  --  TYPE: "+e.type)}),n&&(t.file(n),ko.isObservable(a())&&a()(t))}},$(e).data("fileDragInjected",!0))}}();
//# sourceMappingURL=KO-FileBindings_MultiImgUploader.min.js.map